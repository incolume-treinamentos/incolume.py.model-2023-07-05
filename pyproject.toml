[tool.poetry]
name = "incolume-py-model-2023-07-05"
version = "0.7.0a0"
description = ""
authors = ["britodfbr <britodfbr@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "incolume"}]

classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Operating System :: OS Independent',
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  'Natural Language :: Portuguese (Brazilian)',
  'Topic :: Software Development :: Libraries :: Python Modules',
  'Topic :: Utilities'
]

include = [
  'README.md',
  "CHANGELOG.md",
  'docs/',
  'pyproject.toml',
]

exclude = [
  "examples/",
  "ez_setup",
  "my_package/excluded.py",
  "tests/",
]


[tool.poetry.urls]
"Bug Tracker" = "https://github.com/incolume-treinamentos/incolume.py.model-2023-07-05"
"Documentation" = "https://github.com/incolume-treinamentos/incolume.py.model-2023-07-05/-/tree/master/docs"
"Source" = "https://github.com/incolume-treinamentos/incolume.py.model-2023-07-05"
"Git" = "https://github.com/incolume-treinamentos/incolume.py.model-2023-07-05.git"
"Tracker" = "https://github.com/incolume-treinamentos/incolume.py.model-2023-07-05/-/issues"


[tool.poetry.dependencies]
python = "^3.10"
incolumepy-utils = {git = "https://gitlab.com/development-incolume/incolumepy.utils.git", rev = "master"}


[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.3"
mkdocstrings = "^0.22.0"
mkdocstrings-python = "^1.1.2"
mkdocs-material = "^9.1.18"


[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"


[tool.poetry.group.secty.dependencies]
bandit = {extras = ["toml"], version = "^1.7.5"}
safety = "^2.3.5"


[tool.poetry.group.dev.dependencies]
blue = "^0.9.1"
black = {extras = ["all"], version = "*"}
isort = "^5.12.0"
mypy = "^1.4.1"
mypy-extensions = "^1.0.0"
flake8 = "*"
pylint = "^2.17.4"
tox = "*"
pydocstyle = "^6.3.0"
taskipy = "^1.11.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[PEP8]
# Detalhes em https://pep8.org/
# define para todos os linters compatÃ­veis
max-line-length = 79


[tool.bandit]
exclude_dirs = ["tests", "examples", "coverage_report"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]


[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
  "os.execl",
  "os.execle",
  "os.execlp",
  "os.execlpe",
  "os.execv",
  "os.execve",
  "os.execvp",
  "os.execvpe",
  "os.spawnl",
  "os.spawnle",
  "os.spawnlp",
  "os.spawnlpe",
  "os.spawnv",
  "os.spawnve",
  "os.spawnvp",
  "os.spawnvpe",
  "os.startfile"
]
shell = [
  "os.system",
  "os.popen",
  "os.popen2",
  "os.popen3",
  "os.popen4",
  "popen2.popen2",
  "popen2.popen3",
  "popen2.popen4",
  "popen2.Popen3",
  "popen2.Popen4",
  "commands.getoutput",
  "commands.getstatusoutput"
]
subprocess = [
  "subprocess.Popen",
  "subprocess.call",
  "subprocess.check_call",
  "subprocess.check_output"
]


[tool.pytest.ini_options]
#log_format = '%(asctime)s %(levelname)s %(message)s'
log_format = '%(asctime)s; %(levelname)-8s; %(name)s; %(module)s; %(funcName)s; %(message)s'
log_date_format ='%FT%T%N%z'
addopts = "--doctest-modules --cov=incolume -sx --cov-report term-missing --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml"
testpaths = [
  "tests",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "webtest: marks tests as webtest (deselect with '-m \"not webtest\"')",
  "fast: marks tests as fast (deselect with '-m \"not fast\"')",
]


[tool.coverage.html]
directory = "coverage_report/html"


[tool.coverage.xml]


[tool.coverage.run]
omit = [
  # omit anything in a .local directory anywhere
  "*/.local/*",
  # omit everything in /usr
  "/usr/*",
  # omit this single file
  "configure/truncus.py",
]


[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "logger.debug",
  "logger.info",
  "logger.warning",
  "logger.error",
  "ImportError",
  "ModuleNotFoundError",
  "__package__ =",
  "def run",
  "def terminal.",
  "__author__",
  "class IElements"
]


[tool.isort]
profile = "black"
known_first_party = "poetry"
skip = [".gitignore", ".dockerignore"]
skip_glob = ["example/*"]
extend_skip = [".md", ".json"]
extend_skip_glob = ["my_*_module.py"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 79


[tool.black]
line-length = 79
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
 /(
  ^/foo.py    # exclude a file named foo.py in the root of the project
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.pytest_cache
  | _build
  | buck-out
  | build
  | dist
  | docs
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
 )/
 '''

[flake8]
#max-line-length = 79

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 79

[tool.pylint.basic]
# Allow shorter and longer variable names than the default.
argument-rgx = "[a-z_][a-z0-9_]*$"
attr-rgx = "[a-z_][a-z0-9_]*$"
variable-rgx = "[a-z_][a-z0-9_]*$"

# Ensure that orjson is analysed as a C extension by pylint.
extension-pkg-whitelist = "orjson"


[tool.pylint.messages_control]
disable = [
    # Disable too many and too few checks.
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-function-args",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-few-public-methods",

    # Similar lines in files (often the case in tests).
    "duplicate-code",

    # Many functions (e.g. callbacks) will naturally have unused arguments.
    "unused-argument",

    # # Disable checking that method could be a function in classes (often used for organisation).
    # "no-self-use",

    # Disable failure for TODO items in the codebase (code will always have TODOs).
    "fixme",

    # Disable docstrings checks as we don't require excessive documentation.
    "missing-docstring",

    "no-member",
    "unspecified-encoding",
]


[tool.mypy]
namespace_packages = true
explicit_package_bases = true
#ignore_missing_imports = true
#ignore_errors = false
#warn_return_any = true
#warn_unused_configs = true

[[tool.mypy.overrides]]
module = "pyautogui.*"
disable_error_code = "attr-defined"
disallow_untyped_defs = true



[pycodestyle]
max_line_length = 79
ignore = ['E203']


[tool.tox]
legacy_tox_ini = """
[tox]
minversion = 3.1.0
isolated_build = True
envlist =
    clean
    bandit
    #black
    blue
    isort
    pydocstyle
    flake8
    mypy
    pylint
    py310
    py311

;[tox:.package]
;basepython = python3

[testenv]
allowlist_externals = poetry
whitelist_externals = poetry
skip_install = true
commands =
    poetry env use {envpython}
    poetry install -vv --no-root
    poetry run pytest {posargs} tests/ -m \"not(slow or webtest)\"

[testenv:clean]
deps = coverage
commands =
  poetry run coverage erase

[testenv:linters]
commands =
  #{[testenv:black]commands}
  {[testenv:blue]commands}
  {[testenv:isort]commands}
  {[testenv:flake8]commands}
  {[testenv:pydocstyle]commands}
  {[testenv:mypy]commands}
  {[testenv:pylint]commands}

[testenv:stats]
commands = poetry run pytest -vv

[testenv:flake8]
deps = flake8
commands = poetry run task lint_flake8

[testenv:mypy]
deps =
    mypy
    types-toml
commands = poetry run task lint_mypy

[testenv:pydocstyle]
commands = poetry run task lint_pydocstyle

[testenv:isort]
commands = poetry run task lint_isort

[testenv:pylint]
commands = poetry run task lint_pylint

[testenv:black]
commands = poetry run task lint_black

[testenv:blue]
commands = poetry run task lint_blue

[testenv:bandit]
commands = poetry run task bandit

[testenv:safety]
commands = poetry run task safety
"""


[tool.taskipy.variables]
path = "path/to/my_module"
CHANGELOGFILE = "docs/about/CHANGELOG.md"
URLCOMPARE = "https://github.com/incolume-treinamentos/incolume.py.model-2023-07-05/compare"

[tool.taskipy.tasks]
bandit={help='', cmd='poetry run bandit -c pyproject.toml -r incolume/ test/'}
clean = {cmd = "echo -n 'Starting cleanning environment..'; find ./ \\( -name '*.pyc' -o -name '*~' -o -name '*.log' -o -name '*.log.*' -o -name '.cache' \\) -delete ; echo ' ok' ",  help = "Shallow clean into environment (.pyc, .cache, .egg, .log, et all)" }
pre_clean-all = {cmd='poetry run task clean', help=''}
#clean-all = {cmd = "echo -n 'Starting Deep cleanning ..'; find ./ \\( -name '*_cache' -o -name '*cache__' -o -name dist -o -name build -o -name .tox \\) -exec rm -rf {} 2> /dev/null \\; poetry env list|awk '{print $$1}'|while read a; do poetry env remove $${a} 2> /dev/null && echo '$${a} removed.'|| echo '$${a} not removed.'; done ; echo ' Deep cleaning finished!' ",  help = "Deep cleanning into environment (dist, build, htmlcov, .tox, *_cache, et all)" }
clean-all = {cmd = "echo -n 'Starting Deep cleanning ..'; find ./ \\( -name '*_cache' -o -name '*cache__' -o -name dist -o -name build -o -name .tox -o -name site \\) -exec rm -rf {} 2> /dev/null \\; ; echo ' Deep cleaning finished!' ",  help = "Deep cleanning into environment (dist, build, htmlcov, .tox, *_cache, et all)" }
docs-build = {help="Generate documentation", cmd="poetry run mkdocs build"}
docs-serve = {help="Run server documentation", cmd="poetry run mkdocs serve"}
pre_lint="task lint_blue && task lint_isort && task lint_flake8 && task lint_pydocstyle && task lint_pylint && task lint_mypy"
lint={help='Checking all linters configurated', cmd=''}
lint_black={help='Checking with black', cmd='echo --black--; poetry run black --check --diff incolume/ tests/'}
lint_blue={help='Checking with blue', cmd='echo --blue--; poetry run blue --check --diff incolume/ tests/'}
lint_flake8={help='Checking with flake8', cmd='echo --flake8--; poetry run flake8 --config pyproject.toml incolume/ tests/'}
lint_isort={help='Checking with isort', cmd='echo --isort--; poetry run isort --profile black --check --atomic --py all -m 3 incolume/ tests/'}
lint_mypy={help='Checking with mypy', cmd='echo --mypy--; poetry run mypy --check incolume tests'}
lint_pydocstyle={help='Checking with pydocstyle', cmd='echo --pydocstyle--; poetry run pydocstyle incolume/ tests/'}
lint_pylint={help='Checking with pylint', cmd='echo --pylint--; poetry run pylint incolume/ tests/'}
pre_patch={help='Run linters tools', cmd="poetry run task lint"}
patch={cmd='v=$(poetry version patch) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='Generate a patch Sematic Version'}
post_patch={help='Run securety tools', cmd="poetry run task bandit && poetry run task safety"}
premajor={cmd='v=$(poetry version premajor) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version premajor'}
preminor={cmd='v=$(poetry version preminor) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version preminor'}
prerelease={cmd='v=$(poetry version prerelease) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version prerelease'}
safety={help='Check safety of packages into project.', cmd='poetry run safety check'}
pre_sec={help='Securance validations', cmd='poetry run task bandit && poetry run task safety'}
sec={help="Checking environment's safety", cmd=''}
pre_changelog='poetry run pytest'
changelog={help='Update changelog file', cmd='poetry run gcl docs/about/CHANGELOG.md -u https://github.com/incolume-treinamentos/incolume.py.model-2023-07-05/compare && echo CHANGELOG file updated with success.', user_vars=true}
xpto = { cmd = "echo {path} {CHANGELOGFILE} {URLCOMPARE}", use_vars = true }
setup = { help = 'Configure environment develop', cmd='git config core.hooksPath .git-hooks/; poetry env use 3.10; poetry install'}
